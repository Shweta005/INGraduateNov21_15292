--Challenge1:Find out product price in a category compared to aveerage for category.
SELECT categoryname,productname,unitprice,
AVG(unitprice) OVER (PARTITION BY categoryname)
FROM products
JOIN categories ON categories.categoryid=products.categoryid

--Challenge2:We are looking for strange orders of the product "Alice mutton".Find all records of order
details of this product compared to the average order.
SELECT productname,quantity,
AVG(quantity) OVER (PARTITION BY order_details.productid)
FROM products
JOIN order_details on order_details.productid = products.productid
WHERE productname='Alice Mutton'


--Challenge3:Compare each products order quantity compared to the average order for that product.
SELECT productname,orderid,quantity,
AVG(quantity) OVER (PARTITION BY order_details.productid) AS average
FROM products
JOIN order_details on products.productid=order_details.productid

--Challenge4: Find any suppliers that had 3 times the normal quantity of orders over all their products versus the average order per month.
SELECT companyname,month,year,total_orders,average_monthly
FROM (
SELECT companyname,total_orders,month,year,
AVG(total_orders) OVER (PARTITION BY companyname) as average_monthly
FROM (
SELECT companyname,SUM(quantity) as total_orders,date_part('month',orderdate) as month,date_part('year',orderdate) as year
FROM order_details
JOIN products ON order_details.productid = products.productid
JOIN suppliers ON suppliers.supplierid=products.supplierid
JOIN orders ON orders.orderid=order_details.orderid
GROUP BY companyname,month,year)  as order_by_month) as average_monthly
WHERE total_orders > 3 * average_monthly

--Challenge5: Top two most valuable items ordered for each others records
SELECT * FROM
(SELECT orders.orderid, productid, unitprice, quantity,
 	rank() OVER (PARTITION BY order_details.orderid ORDER BY (quantity*unitprice) DESC) AS rank_amount
FROM orders
NATURAL JOIN order_details) as ranked
WHERE rank_amount <=2;

--Challenge6: Find the 3 least expensive products from each supplier.Return sypplier name,productnam and price.
SELECT companyname,productname,unitprice FROM
(SELECT companyname,productname,unitprice,
rank() OVER (PARTITION BY products.supplierid ORDER BY unitprice ASC) AS price_rank
FROM suppliers
NATURAL JOIN products) as ranked_products
WHERE price_rank <=3;

